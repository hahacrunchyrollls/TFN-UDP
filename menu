#!/bin/bash
# 
# 
# -----------------------------------------------------------

menu() {
info > /dev/null 2>&1
clear
echo -e "\e[31m╔══════════════════════════════════════════════════╗\e[0m"
echo -e "\e[31m║\e[0m Online: $j        Users: $i        Exp: $k          "
echo -e "\e[31m╠══════════════════════════════════════════════════╣\e[0m"
echo -e "\e[31m║\e[0m 1) Create User                                  "
echo -e "\e[31m║\e[0m 2) Remove User                                  "
echo -e "\e[31m║\e[0m 3) Banner                                       "
echo -e "\e[31m║\e[0m 0) Exit                                         "
echo -e "\e[31m╚══════════════════════════════════════════════════╝\e[0m"
read -p " option: " input

case $input in
1) create_user ;;
2) delete_user ;;
3) banner ;;
0) clear && return ;;
*) menu ;;
esac
}

menu_top() {
info > /dev/null 2>&1
clear
}

info() {
timedatectl | grep -q "Time zone: Asia/Manila" || sudo timedatectl set-timezone Asia/Manila
local_timezone=$(timedatectl | awk '/Time zone/ {print $3}')
TZ=":Asia/Manila"
current_datetime=$(TZ="$TZ" date +"%a - %d %b %Y - %-l:%M %p %Z")

info=$(lsb_release -sd | grep -o '^[^ ]*.*')
codename="($(lsb_release -sc | grep -o '^[^ ]*.*'))"

if [[ "$info" =~ "$codename" ]]; then
codename=""
fi

if ! grep -q "/bin/false" /etc/shells; then
echo "/bin/false" >> /etc/shells
fi

a=$(free -h | awk '/Mem:/ {print $2}' | sed 's/i//')
b=$(free -h | awk '/Mem:/ {print $3}' | sed 's/i//')
c=$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2}')

d=$(nproc)
e=$(top -bn1 | awk '/Cpu/ { cpu = 100 - $8 "%"}; END { print cpu }')
f=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
g=$(ps aux | grep dropbear | grep -v grep | wc -l); g=$((g > 0 ? g - 1 : 0))
h=$(grep -c "10.8.0" /etc/openvpn/openvpn-status.log) || h="0"
i=$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd | wc -l)
echo $(hostname -I | awk '{print $1}') > /etc/ip

j=$(($f + $g + $h))

exp=()
for _user in $(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd); do
if chage -l $_user | grep -q "Account expires" && [ "$(date +%s)" -gt "$(date '+%s' -d "$(chage -l $_user | grep "Account expires" | awk -F ': ' '{print $2}')")" ]; then
exp+=( "$_user" )
fi
done
k=${#exp[@]}

if systemctl is-active --quiet badvpn-udpgw.service && systemctl is-enabled --quiet badvpn-udpgw.service; then
l="\e[32m•\e[0m"
else
l="•"
fi
}

function banner {
if grep -q '^Banner /etc/banner' /etc/ssh/sshd_config; then
    banner_active="\e[32m•\e[0m"
else
    banner_active="•"
fi
menu_top
echo
echo -e " 1) enable/disable banner $banner_active"
echo " 2) edit banner"
echo " 0) return"
echo
read -p " option: " choice
case $choice in
1) enable_disable_banner ;;
2) edit_banner ;;
0|*) menu ;;
esac
}

function enable_disable_banner() {
    echo
    if grep -q '^Banner /etc/banner' /etc/ssh/sshd_config; then
        sed -i '/^Banner \/etc\/banner/d' /etc/ssh/sshd_config
        echo " Banner disabled."
    else
        echo -e "\nBanner /etc/banner" | tee -a /etc/ssh/sshd_config > /dev/null 2>&1
        echo " Banner enabled."

    fi
    systemctl restart ssh > /dev/null 2>&1
    systemctl restart sshd > /dev/null 2>&1
    read -p ""
    banner

}

function edit_banner(){
nano /etc/banner
banner
}

function create_user {
info > /dev/null 2>&1
local users=( $(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd) )
menu_top
read -p " Enter user: " username
if [ -z "$username" ] || [ "$username" == "0" ]; then
menu
return
fi
if (( ${#username} < 3 )); then
echo " username must be at least 3 characters long."
read -p ""
create_user
return
fi

for existing_user in "${users[@]}"; do
if [ "$existing_user" = "$username" ]; then
echo " user '$username' already exists."
read -p ""
create_user
return
fi
done

read -p " Enter pass: " password
if [ -z "$password" ]; then
echo " password cannot be empty."
read -p ""
create_user
return
fi
read -p " Enter validity (days): " days
if [ -z "$days" ]; then
echo " validity (days) cannot be empty."
read -p ""
create_user
return
fi
expiry=$(date -d "+$days days" +%Y-%m-%d)
expiry_=$(date -d "$expiry" +"%d %b %Y")
useradd $username -M -s /bin/false -p $(openssl passwd -1 $password) -e $expiry > /dev/null 2>&1
menu_top
echo " user created successfully."
echo
echo " User : $username"
echo " Pass : $password"
echo " Exp  : $expiry ($expiry_)"
echo " Days : $days"
echo " Nameserver : phc.jericoo.site"
echo " Public Key : 7078e879c55e69af888ea9a94e07f92cf49f380f942b3dd91a3d9d09fbd3ce0f"
echo " SSH Port   : 22"
echo " Squid Port : 8080"
read -p ""
menu
}

function delete_user {
info > /dev/null 2>&1
menu_top
echo " Delete Users"
echo

expired_users() {
local exp=()
local now=$(date +%s)
for _user in $(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd); do
local expires=$(chage -l $_user | awk -F ': ' '/Account expires/{print $2}')
if [ "$expires" = "never" ]; then
continue
elif [ -n "$expires" ]; then
if [[ "$(date -d "$expires" +%s)" =~ ^[0-9]+$ ]]; then
local expire_date=$(date -d "$expires" +%s)
if [ "$now" -gt "$expire_date" ]; then
exp+=( "$_user" )
fi
fi
fi
done

if [ ${#exp[@]} -eq 0 ]; then
echo
echo " no expired users found."
return 1
fi
echo
echo " The following users will be deleted:"
for user in "${exp[@]}"; do
echo " $user"
done
echo
read -p " Delete all expired users? [y/n] " confirm
if [ "$confirm" != "y" ] && [ "$confirm" != "Y" ]; then
echo " operation cancelled."
return 1
fi

for user in "${exp[@]}"; do
userdel -f $user > /dev/null 2>&1
ps -ef | grep -w "$user" | awk '{print $2}' | xargs kill -9 > /dev/null 2>&1
echo " User '$user' has been removed."
done
echo
echo " all expired users have been deleted."
}

local users=( $(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd) )
if [ ${#users[@]} -eq 0 ]; then
echo " no users exist."
else
local i=1
for user in "${users[@]}"; do
echo " [$i] $user"
((i++))
done
fi

echo
echo " [e] remove expired users"
echo " [0] return"
echo
read -p " option: " option

case "$option" in
0)
menu
;;
e)
expired_users
read -p ""
delete_user
;;
[1-9]*)
if [ "$option" -le "${#users[@]}" ]; then
local username=${users[$((option-1))]}
userdel -f $username > /dev/null 2>&1
ps -ef | grep -w "$username" | awk '{print $2}' | xargs kill -9 > /dev/null 2>&1
echo
echo " user '$username' has been removed."
read -p ""
delete_user
else
echo
echo " Invalid option."
read -p ""
delete_user
fi
;;
*)
if [ -z "$option" ]; then
menu
else
delete_user
fi
;;
esac
}
menu
